#!/usr/bin/env php
<?php
require __DIR__ . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR
    . '..' . DIRECTORY_SEPARATOR . 'autoload.php';

use PhillipsData\GitMigrate\GitMigrate;
use PhillipsData\GitMigrate\Config;

$opts = getopt(
    null,
    [
        'items:',
        'dir:',
        'authors:',
        'url:',
        'javalib:',
        'sync::',
        'push::',
        'config::'
    ]
);

$config = new Config();
// Load config if present
if (!empty($opts['config'])) {
    $config->load($opts['config']);
}

// Override/set misc options
foreach ($opts as $key => $value) {
    if ($key === 'config' || $key === 'items') {
        continue;
    }
    $config->set($key, $value);
}

$migrate = new GitMigrate(
    $config->get('dir'),
    $config->get('authors'),
    $config->get('url'),
    $config->get('javalib')
);

// Backwards compatible conversion of items to repositories
if (!empty($opts['items'])) {
    $items = [];
    if (file_exists($opts['items'])) {
        $items = require $opts['items'];
    }

    $repos = [];
    $migrate->convertToRepos($items, $config->get('dir'), $repos);
    $config->set('repositories', $repos);
}

$action = 'clone';
if (array_key_exists('sync', $opts)) {
    $action = 'sync';
} elseif (array_key_exists('push', $opts)) {
    $action = 'push';
}

$migrate->processRepositories($config->get('repositories'), $action);
